/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Questao2;

import Questao1.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import sun.security.util.Length;

/**
 *
 * @author leona
 */
public class Interface extends javax.swing.JFrame {

    private ListaPalavras listaPalavras;
    ArvoreBinaria arvoreBi;
    BufferedReader arquivoInicial;
    FileOutputStream arquivoComprim;
    FileOutputStream arquivoBinario;

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        tfLocalArquivo = new javax.swing.JTextField();
        btAnalisar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btProcurarArquivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taResultado = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tfLocalArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfLocalArquivoActionPerformed(evt);
            }
        });
        jPanel1.add(tfLocalArquivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 221, -1));

        btAnalisar.setText("Analisar Arquivo");
        btAnalisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnalisarActionPerformed(evt);
            }
        });
        jPanel1.add(btAnalisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 31, 120, -1));

        jLabel1.setText("Selecione o Arquivo");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        btProcurarArquivo.setText("...");
        btProcurarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProcurarArquivoActionPerformed(evt);
            }
        });
        jPanel1.add(btProcurarArquivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 33, -1));

        taResultado.setColumns(20);
        taResultado.setRows(5);
        jScrollPane1.setViewportView(taResultado);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 400, 390));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfLocalArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfLocalArquivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfLocalArquivoActionPerformed

    private void btAnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnalisarActionPerformed
        if (tfLocalArquivo.getText().equals("")) {
            taResultado.setText("");
            taResultado.setText("Arquivo inválido");
            return;
        }
        //Teste Commit
        long tempoInicioAnalise = System.currentTimeMillis();
        Analisar(tfLocalArquivo.getText());
        taResultado.setText(taResultado.getText()+"\n"+"Tempo Analise: "+(System.currentTimeMillis()-tempoInicioAnalise)+" millisegundos");
        long tempoIniciocompresao = System.currentTimeMillis();
        Comprimir(tfLocalArquivo.getText());
        taResultado.setText(taResultado.getText()+"\n"+"Tempo Compressão: "+(System.currentTimeMillis()-tempoIniciocompresao)+" millisegundos");
        long tempoInicioDecodificacao = System.currentTimeMillis();
        Descomprimir(tfLocalArquivo.getText());
        taResultado.setText(taResultado.getText()+"\n"+"Tempo Descompressão: "+(System.currentTimeMillis()-tempoInicioDecodificacao)+" millisegundos");
        taResultado.setText(taResultado.getText()+"\n"+"Tempo total: "+(System.currentTimeMillis()-tempoInicioAnalise)+" millisegundos");
        try {
            arquivoBinario.write(("\n Arvore Binaria = "+arvoreBi.toString()).getBytes());
            arquivoBinario.close();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btAnalisarActionPerformed
    private void Analisar(String local){
        try {
            int c;
            arquivoInicial = new BufferedReader(new FileReader(local));
            Set<Character> set = new HashSet<Character>();
            ArrayList<NoArvoreBinaria> lista = new ArrayList<>();
            taResultado.setText("Tamanho Arquivo Original: " + Files.readAttributes(Paths.get(local), BasicFileAttributes.class).size() + " bytes \n");
            while (arquivoInicial.ready() && (c = arquivoInicial.read()) != -1) {
                set.add((char) c);
            }

            for (Iterator<Character> iterator = set.iterator(); iterator.hasNext();) {
                Character next = iterator.next();
                BufferedReader arq2 = new BufferedReader(new FileReader(local));
                int i = 0;
                while (arq2.ready() && (c = arq2.read()) != -1) {
                    if (next.equals((char) c)) {
                        i++;
                    }
                }
                //Letra let = new Letra(i,next);
                NoArvoreBinaria letra = new NoArvoreBinaria(i, next);
                lista.add(letra);
                //               taResultado.setText(taResultado.getText()+"Letra -> ("+letra.getLetra()+") Quantidade -> "+letra.getInfo()+"\n" );
            }

            Collections.sort(lista);

            /*for (Iterator<NoArvoreBinaria> iterator = lista.iterator(); iterator.hasNext();) {
                NoArvoreBinaria next = iterator.next();
                System.out.println(next.getLetra()+"--"+next.getInfo());
                
            }*/
            while (lista.size() > 1) {
                int valor = (int) lista.get(0).getInfo() + lista.get(1).getInfo();
                NoArvoreBinaria novo = new NoArvoreBinaria(valor, lista.remove(0), lista.remove(0));
                lista.add(novo);
                Collections.sort(lista);
            }

            //Declaração Foi lá pra cima
            arvoreBi = new ArvoreBinaria();
            arvoreBi.setRaiz(lista.get(0));
            taResultado.setText(taResultado.getText() + "Estrutura da arvore: \n" + arvoreBi.toString());
            taResultado.setText(taResultado.getText() + "\n Lista De códigos \n" + arvoreBi.codigoLetras());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btProcurarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProcurarArquivoActionPerformed

        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int i = file.showSaveDialog(null);
        if (i == 1) {
            tfLocalArquivo.setText("");
        } else {
            File arquivo = file.getSelectedFile();
            tfLocalArquivo.setText(arquivo.getPath());
        }

    }//GEN-LAST:event_btProcurarArquivoActionPerformed
    private void Comprimir(String local){
        try {
            if (arvoreBi == null) {
                return;
            }
            arquivoInicial = new BufferedReader(new FileReader(local));
            //arquivoComprim = new FileOutputStream(tfLocalArquivo.getText() + "\\Comprimido.dat");
            arquivoBinario = new FileOutputStream(local.substring(0,local.lastIndexOf("."))+".out");
            //DataOutputStream bufferTexto = new DataOutputStream(arquivoComprim);

            String linha = arquivoInicial.readLine();
            while (linha != null) {
                String codigo = "";
                for (int i = 0; i < linha.length(); i++) {
                    codigo = codigo + arvoreBi.getCaracter(linha.charAt(i));

                }
                //Escrever arquivoComprim arquivoBinario
                arquivoBinario.write(codigo.getBytes());
                byte cod;

                //gravar convertido
                /* for (int i = 0; i < codigo.length() - 1; i++) {
                    if (codigo.length() > i + 8) {
                        cod = (byte) Integer.parseInt(codigo.substring(i, i + 8));
                    } else {
                        cod = (byte) Integer.parseInt(codigo.substring(i, codigo.length() - 1));
                    }

                    bufferTexto.write(cod);
                    i = i + 8;
                }*/
                linha = arquivoInicial.readLine();
            }
            //arquivoBinario.close();
            //bufferTexto.close();
            //taResultado.setText(taResultado.getText() + "Tamanho Arquivo Comprimido: " + Files.readAttributes(Paths.get(tfLocalArquivoDest.getText() + "\\Comprimido.dat"), BasicFileAttributes.class).size() + " bytes \n");
            taResultado.setText(taResultado.getText()+"\n"+"Arquivo Codificado...");
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    private void Descomprimir(String local){
        try {
            if (arvoreBi == null) {
                return;
            }
            File file = new File(local);
            FileWriter arquivoDescompri = new FileWriter(local.substring(0,local.lastIndexOf("."))+"_Descomprimido.out");
            BufferedWriter arqDesc = new BufferedWriter(arquivoDescompri);
            BufferedReader arqui = new BufferedReader(new FileReader(local.substring(0,local.lastIndexOf("."))+".out"));
            String txt = arqui.readLine();
            NoArvoreBinaria no = arvoreBi.getRaiz();
            while (txt != null) {
                for (int i = 0; i < txt.length(); i++) {

                    if (txt.charAt(i) == '0') {
                        no = no.getEsq();
                    } else {
                        no = no.getDir();
                    }
                    if (no.getDir() == null) {
                        arqDesc.write(no.getLetra());
                        no = arvoreBi.getRaiz();
                    }
                }
                txt = arqui.readLine();

                //arquivoBinario.write(codigo.getBytes());
                //Escrever arquivo Descomprimido
            }
            arqDesc.close();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        taResultado.setText(taResultado.getText()+"\n"+"Arquivo Decodificado com sucesso!");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnalisar;
    private javax.swing.JButton btProcurarArquivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea taResultado;
    private javax.swing.JTextField tfLocalArquivo;
    // End of variables declaration//GEN-END:variables
}
